// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfRecordSock struct {
	Rec struct {
		Pid        uint32
		Tid        uint32
		Ppid       uint32
		Uid        uint32
		Gid        uint32
		_          [4]byte
		Age        uint64
		Proc       [16]int8
		Comm       [32]int8
		CommParent [32]int8
		TsFirst    uint64
		Ts         uint64
	}
	TxTsFirst         uint64
	TxTs              uint64
	RxTsFirst         uint64
	RxTs              uint64
	Family            uint16
	Proto             uint8
	State             uint8
	Role              uint8
	Laddr             [16]int8
	Raddr             [16]int8
	_                 [1]byte
	Lport             uint16
	Rport             uint16
	TxIfindex         uint16
	TxDataPackets     uint32
	TxPackets         uint32
	TxPacketsRetrans  uint32
	TxPacketsDups     uint32
	_                 [4]byte
	TxBytes           uint64
	TxBytesAcked      uint64
	TxBytesRetrans    uint64
	TxRto             uint32
	RxIfindex         uint16
	_                 [2]byte
	RxDataPackets     uint32
	RxPackets         uint32
	RxPacketsQueued   uint32
	RxPacketsDrop     uint32
	RxPacketsRecorder uint32
	RxPacketsFrag     uint32
	RxBytes           uint64
	RxTtl             uint32
	Rtt               uint32
	AppMsg            struct {
		Cnt  uint8
		_    [7]byte
		Ts   [4]uint64
		Seq  [4]uint32
		Len  [4]uint32
		Isrx [4]uint8
		Data [4][1400]uint8
		_    [4]byte
	}
}

type bpfSockInfo struct {
	Pid               uint32
	Tid               uint32
	Ppid              uint32
	Uid               uint32
	Gid               uint32
	_                 [4]byte
	TsProc            uint64
	Proc              [16]int8
	Comm              [32]int8
	CommParent        [32]int8
	TxIfindex         uint16
	_                 [6]byte
	TsFirst           uint64
	TxTsFirst         uint64
	TxTs              uint64
	RxTsFirst         uint64
	RxTs              uint64
	Family            uint16
	Proto             uint8
	State             uint8
	Role              uint8
	Laddr             [16]int8
	Raddr             [16]int8
	_                 [1]byte
	Lport             uint16
	Rport             uint16
	_                 [2]byte
	TxDataPackets     uint32
	TxPackets         uint32
	TxPacketsRetrans  [2]uint32
	TxPacketsDups     [2]uint32
	_                 [4]byte
	TxBytes           uint64
	TxBytesAcked      [2]uint64
	TxBytesRetrans    [2]uint64
	TxRto             uint32
	RxIfindex         uint16
	_                 [2]byte
	RxDataPackets     uint32
	RxPackets         uint32
	RxPacketsQueued   uint32
	RxPacketsDrop     [2]uint32
	RxPacketsRecorder [2]uint32
	RxPacketsFrag     uint32
	RxBytes           uint64
	RxTtl             uint32
	Rtt               uint32
	AppMsg            struct {
		Cnt  uint8
		_    [7]byte
		Ts   [4]uint64
		Seq  [4]uint32
		Len  [4]uint32
		Isrx [4]uint8
		Data [4][1400]uint8
		_    [4]byte
	}
}

type bpfSockTuple struct {
	Laddr [16]int8
	Raddr [16]int8
	Lport uint16
	Rport uint16
	Proto uint8
	_     [1]byte
}

type bpfStats struct {
	Q_pushAdded   uint64
	Q_pushUpdated uint64
	Q_pushReadded uint64
	Q_popExpired  uint64
	Q_popIgnored  uint64
	Q_popMissed   uint64
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
	bpfVariableSpecs
}

// bpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	IpLocalOut       *ebpf.ProgramSpec `ebpf:"__ip_local_out"`
	HandleSkb        *ebpf.ProgramSpec `ebpf:"handle_skb"`
	InetCskAccept    *ebpf.ProgramSpec `ebpf:"inet_csk_accept"`
	InetSockSetState *ebpf.ProgramSpec `ebpf:"inet_sock_set_state"`
	Ip6Xmit          *ebpf.ProgramSpec `ebpf:"ip6_xmit"`
	SkbConsumeUdp    *ebpf.ProgramSpec `ebpf:"skb_consume_udp"`
	TcpV4DoRcv       *ebpf.ProgramSpec `ebpf:"tcp_v4_do_rcv"`
	TcpV6DoRcv       *ebpf.ProgramSpec `ebpf:"tcp_v6_do_rcv"`
	UdpSendSkb       *ebpf.ProgramSpec `ebpf:"udp_send_skb"`
	UdpV6SendSkb     *ebpf.ProgramSpec `ebpf:"udp_v6_send_skb"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	HashSocks      *ebpf.MapSpec `ebpf:"hash_socks"`
	HashTuples     *ebpf.MapSpec `ebpf:"hash_tuples"`
	HeapRecordSock *ebpf.MapSpec `ebpf:"heap_record_sock"`
	HeapSock       *ebpf.MapSpec `ebpf:"heap_sock"`
	HeapTuple      *ebpf.MapSpec `ebpf:"heap_tuple"`
	QueueSocks     *ebpf.MapSpec `ebpf:"queue_socks"`
	RingbufRecords *ebpf.MapSpec `ebpf:"ringbuf_records"`
	Stats          *ebpf.MapSpec `ebpf:"stats"`
}

// bpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfVariableSpecs struct {
	Crc64Tab *ebpf.VariableSpec `ebpf:"crc64_tab"`
	SelfPid  *ebpf.VariableSpec `ebpf:"self_pid"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
	bpfVariables
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	HashSocks      *ebpf.Map `ebpf:"hash_socks"`
	HashTuples     *ebpf.Map `ebpf:"hash_tuples"`
	HeapRecordSock *ebpf.Map `ebpf:"heap_record_sock"`
	HeapSock       *ebpf.Map `ebpf:"heap_sock"`
	HeapTuple      *ebpf.Map `ebpf:"heap_tuple"`
	QueueSocks     *ebpf.Map `ebpf:"queue_socks"`
	RingbufRecords *ebpf.Map `ebpf:"ringbuf_records"`
	Stats          *ebpf.Map `ebpf:"stats"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.HashSocks,
		m.HashTuples,
		m.HeapRecordSock,
		m.HeapSock,
		m.HeapTuple,
		m.QueueSocks,
		m.RingbufRecords,
		m.Stats,
	)
}

// bpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfVariables struct {
	Crc64Tab *ebpf.Variable `ebpf:"crc64_tab"`
	SelfPid  *ebpf.Variable `ebpf:"self_pid"`
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	IpLocalOut       *ebpf.Program `ebpf:"__ip_local_out"`
	HandleSkb        *ebpf.Program `ebpf:"handle_skb"`
	InetCskAccept    *ebpf.Program `ebpf:"inet_csk_accept"`
	InetSockSetState *ebpf.Program `ebpf:"inet_sock_set_state"`
	Ip6Xmit          *ebpf.Program `ebpf:"ip6_xmit"`
	SkbConsumeUdp    *ebpf.Program `ebpf:"skb_consume_udp"`
	TcpV4DoRcv       *ebpf.Program `ebpf:"tcp_v4_do_rcv"`
	TcpV6DoRcv       *ebpf.Program `ebpf:"tcp_v6_do_rcv"`
	UdpSendSkb       *ebpf.Program `ebpf:"udp_send_skb"`
	UdpV6SendSkb     *ebpf.Program `ebpf:"udp_v6_send_skb"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.IpLocalOut,
		p.HandleSkb,
		p.InetCskAccept,
		p.InetSockSetState,
		p.Ip6Xmit,
		p.SkbConsumeUdp,
		p.TcpV4DoRcv,
		p.TcpV6DoRcv,
		p.UdpSendSkb,
		p.UdpV6SendSkb,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_x86_bpfel.o
var _BpfBytes []byte
